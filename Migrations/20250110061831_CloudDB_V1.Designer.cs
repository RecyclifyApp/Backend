// <auto-generated />
using System;
using Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250110061831_CloudDB_V1")]
    partial class CloudDBV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Models.Admin", b =>
                {
                    b.Property<string>("AdminID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.Property<string>("ClassID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ClassPoints")
                        .HasColumnType("int");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ClassID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Backend.Models.DailyStudentPoints", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PointsGained")
                        .HasColumnType("int");

                    b.HasKey("StudentID");

                    b.ToTable("DailyStudentPoints");
                });

            modelBuilder.Entity("Backend.Models.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("Backend.Models.Parent", b =>
                {
                    b.Property<string>("ParentID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ParentID");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Backend.Models.Quest", b =>
                {
                    b.Property<string>("QuestID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("QuestDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestPoints")
                        .HasColumnType("int");

                    b.Property<string>("QuestTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestID");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Backend.Models.QuestProgress", b =>
                {
                    b.Property<string>("QuestID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Progress")
                        .HasColumnType("longtext");

                    b.HasKey("QuestID");

                    b.HasIndex("ClassID");

                    b.ToTable("QuestProgresses");
                });

            modelBuilder.Entity("Backend.Models.Redemption", b =>
                {
                    b.Property<string>("RedemptionID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ClaimedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RedeemedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RedemptionStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RewardID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RedemptionID");

                    b.HasIndex("RewardID");

                    b.HasIndex("StudentID");

                    b.ToTable("Redemptions");
                });

            modelBuilder.Entity("Backend.Models.RewardItem", b =>
                {
                    b.Property<string>("RewardID")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.Property<string>("RewardDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RewardQuantity")
                        .HasColumnType("int");

                    b.Property<string>("RewardTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RewardID");

                    b.ToTable("RewardItems");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("StudentID");

                    b.HasIndex("ClassID");

                    b.HasIndex("ParentID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Backend.Models.Task", b =>
                {
                    b.Property<string>("TaskID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TaskPoints")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TaskID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Backend.Models.TaskProgress", b =>
                {
                    b.Property<string>("TaskID")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("TaskVerified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TaskID");

                    b.HasIndex("StudentID");

                    b.ToTable("TaskProgresses");
                });

            modelBuilder.Entity("Backend.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TeacherID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.WeeklyClassPoints", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(0);

                    b.Property<string>("ClassID")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<int>("PointsGained")
                        .HasColumnType("int");

                    b.HasKey("Date", "ClassID");

                    b.HasIndex("ClassID");

                    b.ToTable("WeeklyClassPoints");
                });

            modelBuilder.Entity("Backend.Models.Admin", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Backend.Models.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.HasOne("Backend.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Backend.Models.DailyStudentPoints", b =>
                {
                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Inbox", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Inboxes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.QuestProgress", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("QuestProgresses")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Backend.Models.Redemption", b =>
                {
                    b.HasOne("Backend.Models.RewardItem", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Parent", "Parent")
                        .WithOne("Student")
                        .HasForeignKey("Backend.Models.Student", "ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Backend.Models.TaskProgress", b =>
                {
                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Backend.Models.WeeklyClassPoints", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("WeeklyClassPoints")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.Navigation("QuestProgresses");

                    b.Navigation("Students");

                    b.Navigation("WeeklyClassPoints");
                });

            modelBuilder.Entity("Backend.Models.Parent", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Teacher", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Inboxes");
                });
#pragma warning restore 612, 618
        }
    }
}
